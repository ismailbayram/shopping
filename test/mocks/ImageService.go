// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/ismailbayram/shopping/internal/media/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ImageService is an autogenerated mock type for the ImageService type
type ImageService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ImageService) Create(_a0 string, _a1 []byte) (domain.Image, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (domain.Image, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) domain.Image); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Image)
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *ImageService) GetByID(_a0 uint) (domain.Image, error) {
	ret := _m.Called(_a0)

	var r0 domain.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (domain.Image, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) domain.Image); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Image)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewImageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageService creates a new instance of ImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageService(t mockConstructorTestingTNewImageService) *ImageService {
	mock := &ImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
