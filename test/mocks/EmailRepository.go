// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/ismailbayram/shopping/pkg/users/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// EmailRepository is an autogenerated mock type for the EmailRepository type
type EmailRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *EmailRepository) Create(_a0 uint, _a1 string) (*domain.Email, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Email
	if rf, ok := ret.Get(0).(func(uint, string) *domain.Email); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Email)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: _a0
func (_m *EmailRepository) GetByEmail(_a0 string) (*domain.Email, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Email
	if rf, ok := ret.Get(0).(func(string) *domain.Email); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Email)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrimaryOfUser provides a mock function with given fields: _a0
func (_m *EmailRepository) GetPrimaryOfUser(_a0 *domain.User) (*domain.Email, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Email
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.Email); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Email)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: _a0
func (_m *EmailRepository) Verify(_a0 *domain.Email) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Email) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEmailRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmailRepository creates a new instance of EmailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmailRepository(t mockConstructorTestingTNewEmailRepository) *EmailRepository {
	mock := &EmailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
